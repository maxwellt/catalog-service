plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.6'
}

ext { // properties in maven, can be referenced using ${...} syntax
	springCloudVersion = "2024.0.0"
	testcontainersVersion = "1.20.1"
	testKeycloakVersion = "2.3.0"
	otelVersion = "1.33.3"
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor // configures gradle to use the Configuration Processor when building the project
	}
}

springBoot {
	buildInfo() // stores build information in a META-INF/build-info.properties file parsed by a BuildProperties object
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:postgresql'
	runtimeOnly 'org.flywaydb:flyway-database-postgresql'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	testLogging {
		events "PASSED", "SKIPPED", "FAILED" // shows output when running tests via cli
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

bootBuildImage { // configuration when running bootBuildImage
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION" : "21.*"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername") // these are passed as param when running ./gradlew bootBuildImage
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}
