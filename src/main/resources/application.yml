spring:
  datasource:
    username: user
    password: password
    url: jdbc:postgresql://localhost:54324/polardb_catalog
    hikari:
      connection-timeout: 2000 # max time to get connection from pool
      maximum-pool-size: 5 # max number of connections to keep in the pool
  application:
    name: catalog-service
  config:
    import: "optional:configserver:" # making it optional means it will just log a warning when it's not available
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 # timeout waiting to connect to config server
      request-read-timeout: 5000 # timeout on waiting to read the configuration
      retry: # uses Spring Retry
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
      fail-fast: false # retry above only used if this is set to true (but local config you don't want to retry probably)
  docker:
    compose:
      enabled: false
  lifecycle:
    timeout-per-shutdown-phase: 15s # how long should Spring Boot allow for pending requests after shutdown signal has been received
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop
server:
  port: 9001
  shutdown: graceful # stop accepting new requests but handle the pending ones
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
polar:
  greeting: Welcome to the default Polar Catalog Service
management:
  endpoints:
    web:
      exposure:
        include: flyway,health,prometheus,refresh # allows you to make a GET to /actuator/refresh which will reload beans with new configuration data, or any bean annotated with @RefreshScope
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true # enabled support for K8S probes (liveness/readiness)
  metrics:
    tags:
      application: ${spring.application.name} # adds a micrometer common tag with the application name. this results in Prometheus label being applied to all metrics.
logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
  level:
    web: debug
    sql: debug
